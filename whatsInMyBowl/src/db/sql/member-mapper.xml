<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE properties SYSTEM "http://java.sun.com/dtd/properties.dtd">
<properties>

	<!-- 로그인 시 필요한 sql문 -->
	<entry key="loginMember">
		SELECT 
		       M_CODE
		     , M_NAME
		     , M_ID
		     , M_PWD
		     , M_PHONE
		     , M_BIRTH
		     , M_GENDER
		     , M_ADDRESS
		     , M_SUBADDRESS
		     , M_POSTCODE
		     , M_EMAIL
		     , M_ENROLLDATE
		     , M_INTRODUCER
		     , M_STATUS
		     , M_QUITREASON
		     , M_QUITDATE
		     , M_AD
		     , M_BLACKDATE
		     , M_BLACKREASON
		     , M_POINT
		 FROM MEMBER
		WHERE M_ID = ?
		  AND M_PWD = ?
		  AND (M_STATUS = 'Y'
		   OR M_STATUS = 'A')
	</entry>

	<!-- 아이디 더블체크 -->
	<entry key="idCheck">
		SELECT
		       COUNT(*) "COUNT"
		  FROM MEMBER
		 WHERE M_ID = ?
	</entry>

	<entry key="emailCheck">
		SELECT
		       COUNT(*) "COUNT"
		  FROM MEMBER
		 WHERE M_EMAIL = ?
	</entry>

	<entry key="insertMember">
	INSERT
	  INTO MEMBER
	     (
	       M_CODE
	     , M_NAME
	     , M_ID
	     , M_PWD
	     , M_PHONE
	     , M_BIRTH
	     , M_GENDER
	     , M_ADDRESS
	     , M_SUBADDRESS
	     , M_POSTCODE
	     , M_EMAIL
	     , M_INTRODUCER
	     , M_AD
	     )
	VALUES
	    (
	      SEQ_MEMBER.NEXTVAL
	    , ?
	    , ?
	    , ?
	    , ?
	    , ?
	    , ?
	    , ?
	    , ?
	    , ?
	    , ?
	    , ?
	    , ?
	    )
	</entry>

	<entry key="pwdCheck">
		 SELECT 
		 		COUNT(*) "COUNT"
		   FROM MEMBER
		  WHERE M_ID = ?
		    AND M_PWD = ?
	</entry>

	<entry key="deleteMember">
		UPDATE MEMBER
		   SET M_STATUS = 'N'
		     , M_QUITREASON = ?
		     , M_QUITDATE = SYSDATE
		 WHERE M_ID = ?
		   AND M_PWD = ?
	</entry>

	<entry key="updateMember">
		UPDATE MEMBER
		   SET M_PWD = ?
		     , M_NAME = ?
		     , M_PHONE = ?
		     , M_EMAIL = ?
		     , M_ADDRESS = ?
		     , M_SUBADDRESS = ?
		     , M_POSTCODE = ?
		     , M_AD = ?
		 WHERE M_ID = ?
	</entry>
	
	<entry key="selectMember">
		SELECT
			   M_CODE
		     , M_NAME
		     , M_ID
		     , M_PWD
		     , M_PHONE
		     , M_BIRTH
		     , M_GENDER
		     , M_ADDRESS
		     , M_SUBADDRESS
		     , M_POSTCODE
		     , M_EMAIL
		     , M_ENROLLDATE
		     , M_INTRODUCER
		     , M_STATUS
		     , M_QUITREASON
		     , M_QUITDATE
		     , M_AD
		     , M_BLACKDATE
		     , M_BLACKREASON
		     , M_POINT
 		  FROM MEMBER
 		 WHERE M_ID = ?
	</entry>

	<entry key="selectAllMember">
		SELECT *
		  FROM(SELECT ROWNUM RNUM, A.*
 				 FROM (SELECT M.M_CODE, M_ID, M_NAME, M_PHONE, COUNT(O.M_CODE) "COUNT", NVL(SUM(PM_FINALCOST), 0) "SUM", M_POINT, M_ENROLLDATE, M_STATUS
  						 FROM MEMBER M
 						 LEFT JOIN "ORDER" O ON(M.M_CODE = O.M_CODE)
 						 LEFT JOIN PAYMENT USING(PM_CODE)
						GROUP BY  M.M_CODE, M_ID, M_NAME, M_PHONE, M_POINT, M_ENROLLDATE, M_STATUS
 						ORDER BY M_CODE DESC) A)
 		 WHERE RNUM BETWEEN ? AND ?		    
	</entry>

	<entry key="selectListCount">
		SELECT
			   COUNT(*) COUNT
		  FROM MEMBER
		 WHERE M_STATUS = 'Y'
		    OR M_STATUS = 'A'
		    OR M_STATUS = 'B'
	</entry>

	<!-- 포인트 조회문 -->
	<entry key="selectPoint">
		SELECT M_CODE, M_ID, ORDER_CODE, POINT_NAME, POINT, POINT_REASON, TO_CHAR(MODIFYDATE, 'YYYY/MM/DD') "MODIFYDATE", M_POINT, POINT_TYPECODE
		  FROM POINT 
		  LEFT JOIN POINT_CATEGORY USING (POINT_TYPECODE)
		  JOIN MEMBER USING(M_CODE)
		 WHERE M_ID = ?
		   AND MODIFYDATE BETWEEN ? AND (TO_DATE(?)+1)
	</entry>
	
	<!-- 이메일로 아이디찾기  -->
	<entry key="searchIdEmail">
		SELECT M_ID
		  FROM MEMBER
		 WHERE M_EMAIL = ?
		   AND M_NAME = ?
		   AND M_STATUS = 'Y'
	</entry>
	
	<!-- 폰번호로 아이디찾기  -->
	<entry key="searchIdPhone">
		SELECT M_ID
		  FROM MEMBER
		 WHERE M_PHONE = ?
		   AND M_NAME = ?
		   AND M_STATUS = 'Y'
	</entry>

	<!-- 비밀번호 찾기위한 아이디, 이름, 이메일 찾기 -->
	<entry key="searchPwd">
		SELECT COUNT(*) "COUNT"
		  FROM MEMBER
		 WHERE M_ID = ?
		   AND M_NAME = ?
		   AND M_EMAIL = ?	
		   AND M_STATUS = 'Y'
	</entry>
	
	<entry key="changePwd">
		UPDATE MEMBER
		   SET M_PWD = ?
		 WHERE M_ID = ?
		   AND M_STATUS = 'Y'
	</entry>
	
	<!-- 포인트 카테고리 조회 -->
	<entry key="selectPointCategory">
		SELECT POINT_TYPECODE, POINT_NAME, POINT_AMOUNT
		  FROM POINT_CATEGORY
		 ORDER
		    BY POINT_TYPECODE DESC
	</entry>
	
	<entry key="pointCategoryCount">
		SELECT
			   COUNT(*) COUNT
		  FROM POINT_CATEGORY
	</entry>
	
	<entry key="addPointCategory">
		INSERT 
		  INTO POINT_CATEGORY
		     ( POINT_TYPECODE 
		     , POINT_NAME
		     , POINT_AMOUNT
		     )
		VALUES
			 (
			   SEQ_PCATEGORY.NEXTVAL
			 , ?
			 , ?
			 )
	</entry>
	
	<entry key="updateMemberA">
		UPDATE MEMBER
		   SET M_NAME = ?
		     , M_PHONE = ?
		     , M_EMAIL = ?
		     , M_ADDRESS = ?
		     , M_SUBADDRESS = ?
		     , M_POSTCODE = ?
		 WHERE M_ID = ?
	</entry>
	
	<entry key="deleteMemberA">
		UPDATE MEMBER
		   SET M_STATUS = 'N'
		     , M_QUITDATE = SYSDATE
		 WHERE M_CODE = ?
	</entry>
		
	<!-- 기간별 남은 포인트 조회 -->
	<entry key="selectRemainPoint">
		SELECT M_CODE, SUM(POINT) "POINT"
		  FROM (SELECT M_CODE, MODIFYDATE, SUM(POINT)"POINT"
		            FROM POINT
		            GROUP BY ROLLUP(M_CODE, MODIFYDATE)
		            HAVING MODIFYDATE BETWEEN '1900-12-01' AND (TO_DATE(?)+1)
		            ORDER BY M_CODE)
		GROUP BY M_CODE
		HAVING M_CODE = ?
	</entry>
	
	<!-- 전체 포인트 조회 -->
	<entry key="totalPointSelect">
		SELECT M_CODE, SUM(POINT) "TTL_POINT"
		  FROM POINT
		 GROUP 
		    BY M_CODE
		HAVING M_CODE= ?
	</entry>
	
	<!-- 회원가입시 포인트 주는 구문 -->
	<entry key="insertPoint">
		INSERT 
		  INTO POINT 
		     (
		       POINT_CODE
		     , M_CODE
		     , POINT_TYPECODE
		     , POINT
		     )
		VALUES
		 	 (
		 	   SEQ_POINT.NEXTVAL
		 	 , ?
		 	 , 10
		 	 , 1000)
	</entry>
</properties>